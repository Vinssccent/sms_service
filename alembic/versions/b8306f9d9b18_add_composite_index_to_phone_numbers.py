"""Add composite index to phone_numbers

Revision ID: b8306f9d9b18
Revises: 7e247e47c00a
Create Date: 2025-08-29 17:58:55.103845

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b8306f9d9b18'
down_revision: Union[str, Sequence[str], None] = '7e247e47c00a'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ИСПРАВЛЕНИЕ: Добавлен параметр if_exists=True ко всем операциям удаления, чтобы избежать ошибок.
    op.drop_table('provider_ips', if_exists=True)
    op.drop_index(op.f('ix_daily_stats_country_id'), table_name='daily_stats', if_exists=True)
    op.drop_index(op.f('ix_daily_stats_provider_id'), table_name='daily_stats', if_exists=True)
    op.drop_index(op.f('ix_daily_stats_service_id'), table_name='daily_stats', if_exists=True)
    op.drop_index(op.f('ix_daily_stats_stat_date'), table_name='daily_stats', if_exists=True)
    op.drop_table('daily_stats', if_exists=True)
    op.drop_index(op.f('ix_orphan_sms_recv_at_phone'), table_name='orphan_sms', if_exists=True)
    op.drop_index(op.f('ix_orphan_sms_recv_at_provider_country_operator'), table_name='orphan_sms', if_exists=True)
    op.drop_index(op.f('ix_orphan_sms_recv_at_source'), table_name='orphan_sms', if_exists=True)
    op.drop_index(op.f('ix_phone_numbers_fast_select'), table_name='phone_numbers', if_exists=True)
    op.drop_index(op.f('ix_phone_numbers_fast_select_op'), table_name='phone_numbers', if_exists=True)
    op.drop_index(op.f('ix_phone_numbers_free_active'), table_name='phone_numbers', if_exists=True)
    op.drop_index(op.f('ix_phone_numbers_in_use_true'), table_name='phone_numbers', if_exists=True)
    op.create_index('ix_phone_number_lookup', 'phone_numbers', ['provider_id', 'country_id', 'is_active', 'is_in_use', 'sort_order'], unique=False, if_not_exists=True)
    op.drop_index(op.f('ix_sessions_service_phone'), table_name='sessions', if_exists=True)
    op.drop_index(op.f('ix_sms_messages_session_received_at'), table_name='sms_messages', if_exists=True)
    op.drop_index(op.f('ix_sms_messages_source_received_at'), table_name='sms_messages', if_exists=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ИСПРАВЛЕНИЕ: Добавлен параметр if_not_exists=True, чтобы избежать ошибок при откате.
    op.create_index(op.f('ix_sms_messages_source_received_at'), 'sms_messages', ['source_addr', 'received_at'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_sms_messages_session_received_at'), 'sms_messages', ['session_id', 'received_at'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_sessions_service_phone'), 'sessions', ['service_id', 'phone_number_id'], unique=False, if_not_exists=True)
    op.drop_index('ix_phone_number_lookup', table_name='phone_numbers', if_exists=True)
    op.create_index(op.f('ix_phone_numbers_in_use_true'), 'phone_numbers', ['id'], unique=False, postgresql_where='(is_in_use IS TRUE)', if_not_exists=True)
    op.create_index(op.f('ix_phone_numbers_free_active'), 'phone_numbers', ['id'], unique=False, postgresql_where='((is_in_use IS FALSE) AND (is_active IS TRUE))', if_not_exists=True)
    op.create_index(op.f('ix_phone_numbers_fast_select_op'), 'phone_numbers', ['provider_id', 'country_id', 'operator_id', 'sort_order'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))', if_not_exists=True)
    op.create_index(op.f('ix_phone_numbers_fast_select'), 'phone_numbers', ['provider_id', 'country_id', 'sort_order'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))', if_not_exists=True)
    op.create_index(op.f('ix_orphan_sms_recv_at_source'), 'orphan_sms', ['received_at', 'source_addr'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_orphan_sms_recv_at_provider_country_operator'), 'orphan_sms', ['received_at', 'provider_id', 'country_id', 'operator_id'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_orphan_sms_recv_at_phone'), 'orphan_sms', ['received_at', 'phone_number_str'], unique=False, if_not_exists=True)
    op.create_table('daily_stats',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('stat_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('service_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('country_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sms_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('unique_numbers_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], name=op.f('daily_stats_country_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name=op.f('daily_stats_provider_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], name=op.f('daily_stats_service_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('daily_stats_pkey')),
    sa.UniqueConstraint('stat_date', 'service_id', 'provider_id', 'country_id', name=op.f('_daily_stats_uc'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    if_not_exists=True
    )
    op.create_index(op.f('ix_daily_stats_stat_date'), 'daily_stats', ['stat_date'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_daily_stats_service_id'), 'daily_stats', ['service_id'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_daily_stats_provider_id'), 'daily_stats', ['provider_id'], unique=False, if_not_exists=True)
    op.create_index(op.f('ix_daily_stats_country_id'), 'daily_stats', ['country_id'], unique=False, if_not_exists=True)
    op.create_table('provider_ips',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_cidr', sa.VARCHAR(length=45), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name=op.f('provider_ips_provider_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('provider_ips_pkey')),
    sa.UniqueConstraint('provider_id', 'ip_cidr', name=op.f('provider_ips_provider_id_ip_cidr_key'), postgresql_include=[], postgresql_nulls_not_distinct=False),
    if_not_exists=True
    )
    # ### end Alembic commands ###