"""Add allowed_senders to Service model

Revision ID: 461a4b63e33e
Revises: aa11bb22cc33
Create Date: 2025-08-25 22:18:28.745640

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '461a4b63e33e'
down_revision: Union[str, Sequence[str], None] = 'aa11bb22cc33'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ux_provider_ips_unique'), table_name='provider_ips')
    op.drop_table('provider_ips')
    op.drop_index(op.f('idx_operators_country_name'), table_name='operators')
    op.drop_index(op.f('idx_orphan_sms_country'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_group'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_operator'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_phone_number'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_provider'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_received_at'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_received_source'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_source_addr'), table_name='orphan_sms')
    op.drop_index(op.f('idx_orphan_sms_ts_pco'), table_name='orphan_sms')
    op.drop_index(op.f('ix_orphan_report_grp'), table_name='orphan_sms')
    op.drop_index(op.f('ix_orphan_src_date'), table_name='orphan_sms')
    op.drop_index(op.f('idx_phone_number_usage_num_srv'), table_name='phone_number_usage')
    op.drop_index(op.f('idx_phone_number_usage_srv_last_used'), table_name='phone_number_usage')
    op.drop_index(op.f('idx_pnu_phone_service_include'), table_name='phone_number_usage', postgresql_include=['usage_count', 'last_used_at'])
    op.drop_index(op.f('idx_pnu_service_lastusage'), table_name='phone_number_usage')
    op.drop_index(op.f('idx_pnu_service_phone'), table_name='phone_number_usage')
    op.drop_index(op.f('idx_phone_numbers_available_by_country'), table_name='phone_numbers', postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.drop_index(op.f('idx_phone_numbers_available_by_country_operator'), table_name='phone_numbers', postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.drop_index(op.f('idx_phone_numbers_available_by_country_provider'), table_name='phone_numbers', postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.drop_index(op.f('idx_phone_numbers_country_active_free'), table_name='phone_numbers')
    op.drop_index(op.f('idx_phone_numbers_number_str_inc'), table_name='phone_numbers', postgresql_include=['provider_id', 'country_id', 'operator_id'])
    op.drop_index(op.f('idx_phone_numbers_provider_country'), table_name='phone_numbers')
    op.drop_index(op.f('idx_phone_numbers_use_active'), table_name='phone_numbers')
    op.drop_index(op.f('idx_pn_available_country_provider'), table_name='phone_numbers', postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.drop_index(op.f('idx_pn_country_provider_active_free'), table_name='phone_numbers', postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.drop_index(op.f('idx_pn_provider_country_active_free'), table_name='phone_numbers', postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.drop_index(op.f('uq_providers_system_id'), table_name='providers', postgresql_where="((system_id IS NOT NULL) AND ((system_id)::text <> ''::text))")
    op.add_column('services', sa.Column('allowed_senders', sa.Text(), nullable=True, comment='Через запятую: Google,GO,CloudOTP'))
    op.drop_index(op.f('idx_sess_created'), table_name='sessions')
    op.drop_index(op.f('idx_sess_phone'), table_name='sessions')
    op.drop_index(op.f('idx_sess_service'), table_name='sessions')
    op.drop_index(op.f('idx_sess_status'), table_name='sessions')
    op.drop_index(op.f('idx_sessions_service_id'), table_name='sessions')
    op.drop_index(op.f('idx_sessions_status_created_at'), table_name='sessions')
    op.drop_index(op.f('idx_sms_messages_received_at'), table_name='sms_messages')
    op.drop_index(op.f('idx_sms_messages_received_session'), table_name='sms_messages')
    op.drop_index(op.f('idx_sms_messages_session'), table_name='sms_messages')
    op.drop_index(op.f('idx_sms_messages_session_last'), table_name='sms_messages')
    op.drop_index(op.f('idx_sms_messages_session_time'), table_name='sms_messages')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_sms_messages_session_time'), 'sms_messages', ['session_id', 'received_at'], unique=False)
    op.create_index(op.f('idx_sms_messages_session_last'), 'sms_messages', ['session_id', sa.literal_column('received_at DESC')], unique=False)
    op.create_index(op.f('idx_sms_messages_session'), 'sms_messages', ['session_id'], unique=False)
    op.create_index(op.f('idx_sms_messages_received_session'), 'sms_messages', ['received_at', 'session_id'], unique=False)
    op.create_index(op.f('idx_sms_messages_received_at'), 'sms_messages', ['received_at'], unique=False)
    op.create_index(op.f('idx_sessions_status_created_at'), 'sessions', ['status', 'created_at'], unique=False)
    op.create_index(op.f('idx_sessions_service_id'), 'sessions', ['service_id'], unique=False)
    op.create_index(op.f('idx_sess_status'), 'sessions', ['status'], unique=False)
    op.create_index(op.f('idx_sess_service'), 'sessions', ['service_id'], unique=False)
    op.create_index(op.f('idx_sess_phone'), 'sessions', ['phone_number_id'], unique=False)
    op.create_index(op.f('idx_sess_created'), 'sessions', ['created_at'], unique=False)
    op.drop_column('services', 'allowed_senders')
    op.create_index(op.f('uq_providers_system_id'), 'providers', [sa.literal_column('lower(system_id::text)')], unique=True, postgresql_where="((system_id IS NOT NULL) AND ((system_id)::text <> ''::text))")
    op.create_index(op.f('idx_pn_provider_country_active_free'), 'phone_numbers', ['provider_id', 'country_id', 'sort_order'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.create_index(op.f('idx_pn_country_provider_active_free'), 'phone_numbers', ['country_id', 'provider_id', 'sort_order'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.create_index(op.f('idx_pn_available_country_provider'), 'phone_numbers', ['country_id', 'provider_id', 'sort_order', 'id'], unique=False, postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.create_index(op.f('idx_phone_numbers_use_active'), 'phone_numbers', ['is_in_use', 'is_active'], unique=False)
    op.create_index(op.f('idx_phone_numbers_provider_country'), 'phone_numbers', ['provider_id', 'country_id'], unique=False)
    op.create_index(op.f('idx_phone_numbers_number_str_inc'), 'phone_numbers', ['number_str'], unique=False, postgresql_include=['provider_id', 'country_id', 'operator_id'])
    op.create_index(op.f('idx_phone_numbers_country_active_free'), 'phone_numbers', ['country_id', 'is_active', 'is_in_use'], unique=False)
    op.create_index(op.f('idx_phone_numbers_available_by_country_provider'), 'phone_numbers', ['country_id', 'provider_id', 'sort_order', 'id'], unique=False, postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.create_index(op.f('idx_phone_numbers_available_by_country_operator'), 'phone_numbers', ['country_id', 'operator_id', 'sort_order', 'id'], unique=False, postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.create_index(op.f('idx_phone_numbers_available_by_country'), 'phone_numbers', ['country_id', 'sort_order'], unique=False, postgresql_where='((is_active = true) AND (is_in_use = false))')
    op.create_index(op.f('idx_pnu_service_phone'), 'phone_number_usage', ['service_id', 'phone_number_id'], unique=False)
    op.create_index(op.f('idx_pnu_service_lastusage'), 'phone_number_usage', ['service_id', 'last_used_at', 'usage_count', 'phone_number_id'], unique=False)
    op.create_index(op.f('idx_pnu_phone_service_include'), 'phone_number_usage', ['phone_number_id', 'service_id'], unique=False, postgresql_include=['usage_count', 'last_used_at'])
    op.create_index(op.f('idx_phone_number_usage_srv_last_used'), 'phone_number_usage', ['service_id', 'last_used_at', 'usage_count', 'phone_number_id'], unique=False)
    op.create_index(op.f('idx_phone_number_usage_num_srv'), 'phone_number_usage', ['phone_number_id', 'service_id'], unique=False)
    op.create_index(op.f('ix_orphan_src_date'), 'orphan_sms', ['source_addr', 'received_at'], unique=False)
    op.create_index(op.f('ix_orphan_report_grp'), 'orphan_sms', ['provider_id', 'source_addr', 'country_id', 'operator_id'], unique=False)
    op.create_index(op.f('idx_orphan_sms_ts_pco'), 'orphan_sms', ['received_at', 'provider_id', 'country_id', 'operator_id'], unique=False)
    op.create_index(op.f('idx_orphan_sms_source_addr'), 'orphan_sms', ['source_addr'], unique=False)
    op.create_index(op.f('idx_orphan_sms_received_source'), 'orphan_sms', ['received_at', 'source_addr'], unique=False)
    op.create_index(op.f('idx_orphan_sms_received_at'), 'orphan_sms', ['received_at'], unique=False)
    op.create_index(op.f('idx_orphan_sms_provider'), 'orphan_sms', ['provider_id'], unique=False)
    op.create_index(op.f('idx_orphan_sms_phone_number'), 'orphan_sms', ['phone_number_str'], unique=False)
    op.create_index(op.f('idx_orphan_sms_operator'), 'orphan_sms', ['operator_id'], unique=False)
    op.create_index(op.f('idx_orphan_sms_group'), 'orphan_sms', ['provider_id', 'country_id', 'operator_id'], unique=False)
    op.create_index(op.f('idx_orphan_sms_country'), 'orphan_sms', ['country_id'], unique=False)
    op.create_index(op.f('idx_operators_country_name'), 'operators', ['country_id', 'name'], unique=False)
    op.create_table('provider_ips',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_cidr', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name=op.f('provider_ips_provider_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('provider_ips_pkey'))
    )
    op.create_index(op.f('ux_provider_ips_unique'), 'provider_ips', ['provider_id', 'ip_cidr'], unique=True)
    # ### end Alembic commands ###
