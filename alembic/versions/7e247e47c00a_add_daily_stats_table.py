"""Add daily_stats table

Revision ID: 7e247e47c00a
Revises: 210605f58518
Create Date: 2025-08-29 15:59:52.552021

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7e247e47c00a'
down_revision: Union[str, Sequence[str], None] = '210605f58518'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('daily_stats',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('stat_date', sa.Date(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('provider_id', sa.Integer(), nullable=False),
    sa.Column('country_id', sa.Integer(), nullable=False),
    sa.Column('sms_count', sa.Integer(), nullable=False),
    sa.Column('unique_numbers_count', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['country_id'], ['countries.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('stat_date', 'service_id', 'provider_id', 'country_id', name='_daily_stats_uc')
    )
    op.create_index(op.f('ix_daily_stats_country_id'), 'daily_stats', ['country_id'], unique=False)
    op.create_index(op.f('ix_daily_stats_provider_id'), 'daily_stats', ['provider_id'], unique=False)
    op.create_index(op.f('ix_daily_stats_service_id'), 'daily_stats', ['service_id'], unique=False)
    op.create_index(op.f('ix_daily_stats_stat_date'), 'daily_stats', ['stat_date'], unique=False)
    op.drop_index(op.f('ix_provider_ips_cidr'), table_name='provider_ips')
    op.drop_index(op.f('uq_provider_ips'), table_name='provider_ips')
    op.drop_table('provider_ips')
    op.drop_index(op.f('ix_orphan_report_grp'), table_name='orphan_sms')
    op.drop_index(op.f('ix_orphan_src_date'), table_name='orphan_sms')
    op.drop_index(op.f('uq_orphan_dedupe'), table_name='orphan_sms', postgresql_where='((dedupe_minute_bucket IS NOT NULL) AND (text_md5 IS NOT NULL))')
    op.drop_column('orphan_sms', 'dedupe_minute_bucket')
    op.drop_column('orphan_sms', 'text_md5')
    op.drop_index(op.f('idx_pnu_service_phone'), table_name='phone_number_usage')
    op.drop_index(op.f('idx_pn_available_copid'), table_name='phone_numbers', postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.drop_index(op.f('idx_pn_available_cpid'), table_name='phone_numbers', postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.drop_index(op.f('ix_phone_numbers_performance_lookup'), table_name='phone_numbers')
    op.drop_index(op.f('idx_sms_session_received'), table_name='sms_messages')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_index(op.f('idx_sms_session_received'), 'sms_messages', ['session_id', sa.literal_column('received_at DESC')], unique=False)
    op.create_index(op.f('ix_phone_numbers_performance_lookup'), 'phone_numbers', ['provider_id', 'country_id', 'is_active', 'is_in_use'], unique=False)
    op.create_index(op.f('idx_pn_available_cpid'), 'phone_numbers', ['country_id', 'provider_id', 'id'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.create_index(op.f('idx_pn_available_copid'), 'phone_numbers', ['country_id', 'operator_id', 'provider_id', 'id'], unique=False, postgresql_where='((is_active IS TRUE) AND (is_in_use IS FALSE))')
    op.create_index(op.f('idx_pnu_service_phone'), 'phone_number_usage', ['service_id', 'phone_number_id'], unique=False)
    op.add_column('orphan_sms', sa.Column('text_md5', sa.VARCHAR(length=32), autoincrement=False, nullable=True))
    op.add_column('orphan_sms', sa.Column('dedupe_minute_bucket', sa.BIGINT(), autoincrement=False, nullable=True))
    op.create_index(op.f('uq_orphan_dedupe'), 'orphan_sms', ['provider_id', 'source_addr', 'phone_number_str', 'dedupe_minute_bucket', 'text_md5'], unique=True, postgresql_where='((dedupe_minute_bucket IS NOT NULL) AND (text_md5 IS NOT NULL))')
    op.create_index(op.f('ix_orphan_src_date'), 'orphan_sms', ['source_addr', 'received_at'], unique=False)
    op.create_index(op.f('ix_orphan_report_grp'), 'orphan_sms', ['provider_id', 'source_addr', 'country_id', 'operator_id'], unique=False)
    op.create_table('provider_ips',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('provider_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('ip_cidr', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['provider_id'], ['providers.id'], name=op.f('provider_ips_provider_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('provider_ips_pkey'))
    )
    op.create_index(op.f('uq_provider_ips'), 'provider_ips', ['provider_id', 'ip_cidr'], unique=True)
    op.create_index(op.f('ix_provider_ips_cidr'), 'provider_ips', ['ip_cidr'], unique=False)
    op.drop_index(op.f('ix_daily_stats_stat_date'), table_name='daily_stats')
    op.drop_index(op.f('ix_daily_stats_service_id'), table_name='daily_stats')
    op.drop_index(op.f('ix_daily_stats_provider_id'), table_name='daily_stats')
    op.drop_index(op.f('ix_daily_stats_country_id'), table_name='daily_stats')
    op.drop_table('daily_stats')
    # ### end Alembic commands ###
