# src/smpp_worker.py
# -*- coding: utf-8 -*-
"""
SMPP-–≤–æ—Ä–∫–µ—Ä: –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ, –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ–¥–∞, –ø—Ä–∏–≤—è–∑–∫–∞ –∫ —Å–µ—Å—Å–∏–∏.
–ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ orphan_sms –∏ —à–ª—ë–º REJECT 0x45 (69).
"""

import logging
import time
import threading
import re
from typing import Optional

import smpplib.client
import smpplib.exceptions
from sqlalchemy.orm import Session, selectinload
import redis

from src.database import SessionLocal
from src import models
from src.utils import normalize_phone_number

log = logging.getLogger(__name__)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Redis ---
try:
    redis_client = redis.Redis(decode_responses=True)
    redis_client.ping()
    log.info("‚úì SMPP Worker: –£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Redis.")
except redis.exceptions.ConnectionError as e:
    log.error(f"üî• SMPP Worker: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Redis: {e}.")
    redis_client = None


# SMPP –∫–æ–º–∞–Ω–¥–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
ESME_ROK = 0x00000000
ESME_RINVSENDERID = 0x00000045  # 69
ESME_RSYSERR = 0x00000008


def save_orphan_sms(db: Session, phone_number_str: str, source_addr: str, text: str):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ö–æ–¥—è—â–µ–µ SMS –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ–π —Å–µ—Å—Å–∏–∏ (–∏–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–≤—à–µ–µ —Å —Å–µ—Ä–≤–∏—Å–æ–º)
    –≤ —Ç–∞–±–ª–∏—Ü—É orphan_sms. –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥—Ç—è–Ω—É—Ç—å provider/country/operator –∏–∑ phone_numbers.
    """
    try:
        provider_id = country_id = operator_id = None

        phone_obj = (
            db.query(models.PhoneNumber)
            .filter(models.PhoneNumber.number_str == phone_number_str)
            .first()
        )
        if phone_obj:
            provider_id = phone_obj.provider_id
            country_id = phone_obj.country_id
            operator_id = phone_obj.operator_id

        orphan = models.OrphanSms(
            phone_number_str=phone_number_str,
            source_addr=source_addr,
            text=text,
            provider_id=provider_id,
            country_id=country_id,
            operator_id=operator_id,
        )
        db.add(orphan)
        db.commit()
        log.info(
            f"[ORPHAN_SMS] Saved id={orphan.id} src='{source_addr}' dst='{phone_number_str}' "
            f"(prov={provider_id}, country={country_id}, op={operator_id})"
        )
    except Exception as e:
        db.rollback()
        log.error(f"[ORPHAN_SMS] Save error: {e}", exc_info=True)


def _parse_code(text: str) -> Optional[str]:
    """–ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ (best-effort)."""
    if not text:
        return None
    # ### 123 456 –∏–ª–∏ 123-456
    m = re.search(r'\b(\d{3,4})[\s-]+(\d{3,4})\b', text)
    if m:
        return f"{m.group(1)}{m.group(2)}"
    # —Å–ª–æ–≤–∞-—Ç—Ä–∏–≥–≥–µ—Ä—ã
    patterns = [
        r'(?:code|–∫–æ–¥|–ø–∞—Ä–æ–ª—å|code is|is your code|code:|–∫–æ–¥–∞:|–∫–æ–¥–æ–º:)\s*(\d{4,8})',
        r'(\d{4,8})\s*(?:is your|–≤–∞—à|—Ç–≤–æ–π)\s*(?:code|–∫–æ–¥|–ø–∞—Ä–æ–ª—å)',
    ]
    for p in patterns:
        m = re.search(p, text, re.IGNORECASE)
        if m:
            return m.group(1)
    # –ª—é–±–æ–µ ‚Äú–æ—Ç–¥–µ–ª—å–Ω–æ–µ‚Äù —á–∏—Å–ª–æ
    m = re.search(r'\b(\d{4,8})\b', text)
    if m:
        return m.group(1)
    # fallback: –ª—é–±—ã–µ —Ü–∏—Ñ—Ä—ã –ø–æ–¥—Ä—è–¥
    only = re.sub(r'\D+', '', text or '')
    m = re.search(r'(\d{4,8})', only)
    return m.group(1) if m else None


def _get_decoded_text(pdu) -> str:
    """–ü—ã—Ç–∞–µ–º—Å—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å short_message —Å —É—á—ë—Ç–æ–º data_coding."""
    message_bytes = pdu.short_message
    data_coding = getattr(pdu, 'data_coding', 0)
    encs = []
    if data_coding == 8:
        encs = ['utf-16be', 'latin1', 'ascii']
    elif data_coding == 0:
        encs = ['ascii', 'latin1']
    else:
        encs = ['latin1', 'ascii']
    for enc in encs:
        try:
            return message_bytes.decode(enc)
        except UnicodeDecodeError:
            continue
    return message_bytes.decode('ascii', errors='replace')


def _handle_deliver_sm(pdu, db: Session) -> int:
    """
    –ì–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–µ–π SMS.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç SMPP status –¥–ª—è –æ—Ç–≤–µ—Ç–∞ —Å–µ—Ä–≤–µ—Ä–æ–º –æ–±—Ä–∞—Ç–Ω–æ –∫–ª–∏–µ–Ω—Ç—É.
    """
    try:
        src_raw = pdu.source_addr.decode(errors="replace").strip()
        dst_raw = pdu.destination_addr.decode(errors="replace")
        text = _get_decoded_text(pdu)

        clean_text = text.replace('\n', ' ').replace('\r', '')
        log.info(f"–í—Ö–æ–¥—è—â–∞—è SMS –æ—Ç '{src_raw}' –Ω–∞ '{dst_raw}' —Å —Ç–µ–∫—Å—Ç–æ–º: '{clean_text}'")

        # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä –≤ +E.164
        dst = normalize_phone_number(dst_raw)

        # --- –ù–ê–ß–ê–õ–û –ò–ó–ú–ï–ù–ï–ù–ò–ô: –£—Å–∏–ª–µ–Ω–Ω–∞—è –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –≥–æ–Ω–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---
        retries = 5 
        active_sessions = []
        for i in range(retries):
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–µ—Å—Å–∏–∏
            active_sessions = (
                db.query(models.Session)
                .options(selectinload(models.Session.service))
                .filter(
                    models.Session.phone_number_str == dst,
                    models.Session.status.in_([1, 3]),
                )
                .order_by(models.Session.created_at.desc())
                .all()
            )
            
            if active_sessions:
                if i > 0:
                    log.info(f"‚úì –°–µ—Å—Å–∏—è –¥–ª—è '{dst}' –Ω–∞–π–¥–µ–Ω–∞ —Å –ø–æ–ø—ã—Ç–∫–∏ ‚Ññ{i+1}")
                break
            
            if i < retries - 1 and redis_client and redis_client.exists(f"pending_session:{dst}"):
                log.warning(f"–°–µ—Å—Å–∏—è –¥–ª—è '{dst}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/{retries}), –Ω–æ –µ—Å—Ç—å —Å–∏–≥–Ω–∞–ª –≤ Redis. –ñ–¥—É 200ms...")
                time.sleep(0.2)
                db.expire_all()
            else:
                break
        # --- –ö–û–ù–ï–¶ –ò–ó–ú–ï–ù–ï–ù–ò–ô ---

        if not active_sessions:
            log.warning(
                f"REJECT: –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∏ –æ–¥–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –¥–ª—è –Ω–æ–º–µ—Ä–∞ '{dst}' –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫. "
                f"–°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ orphan –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é 69."
            )
            save_orphan_sms(db, dst, src_raw, text)
            return ESME_RINVSENDERID

        matched_session = None
        text_lower, src_lower = text.lower(), src_raw.lower()

        for sess in active_sessions:
            service_obj = sess.service
            if not service_obj:
                continue

            if service_obj.code == 'nitro':
                log.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ —Å–µ—Å—Å–∏—è –¥–ª—è —Å–ø–µ—Ü. —Å–µ—Ä–≤–∏—Å–∞ '{service_obj.name}'. –ü—Ä–∏–Ω–∏–º–∞—é –ª—é–±–æ–µ SMS.")
                matched_session = sess
                break

            all_keywords = set()
            if service_obj.name:
                parts = re.findall(r'\w+', service_obj.name.lower())
                all_keywords.update(p for p in parts if p)

            if not all_keywords:
                log.warning(
                    f"REJECT: –î–ª—è —Å–µ—Ä–≤–∏—Å–∞ '{service_obj.name}' –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –∏–º–µ–Ω–∏."
                )
                continue

            is_match_found = any(
                kw in text_lower or kw in src_lower
                for kw in all_keywords
                if kw
            )
            if is_match_found:
                matched_session = sess
                break

        if not matched_session:
            log.warning(
                f"REJECT: SMS –æ—Ç '{src_raw}' –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–π –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π –¥–ª—è –Ω–æ–º–µ—Ä–∞ '{dst}'. "
                f"–°–æ—Ö—Ä–∞–Ω—è—é –∫–∞–∫ orphan –∏ –≤–æ–∑–≤—Ä–∞—â–∞—é 69."
            )
            save_orphan_sms(db, dst, src_raw, text)
            return ESME_RINVSENDERID

        code = _parse_code(text)
        db.add(
            models.SmsMessage(
                session_id=matched_session.id,
                source_addr=src_raw,
                text=text,
                code=code,
            )
        )
        matched_session.status = 2
        db.commit()
        log.info(
            f"SUCCESS: SMS –æ—Ç '{src_raw}' –ø—Ä–∏–≤—è–∑–∞–Ω–∞ –∫ —Å–µ—Å—Å–∏–∏ {matched_session.id} "
            f"(—Å–µ—Ä–≤–∏—Å: {matched_session.service.name}), –∫–æ–¥={code}"
        )
        return ESME_ROK

    except Exception as exc:
        log.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ SMS: {exc}", exc_info=True)
        db.rollback()
        return ESME_RSYSERR


def run_smpp_provider_loop(provider: models.Provider, stop_evt: threading.Event) -> None:
    """
    –¶–∏–∫–ª –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–µ–º—É SMPP-–ø—Ä–æ–≤–∞–π–¥–µ—Ä—É (bind TRX) –∏ –ø—Ä–∏—ë–º–∞ deliver_sm.
    """
    client = None
    log.info(f"–ó–∞–ø—É—Å–∫ –≤–æ—Ä–∫–µ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ [{provider.id}] {provider.name}")

    while not stop_evt.is_set():
        try:
            client = smpplib.client.Client(
                host=provider.smpp_host,
                port=provider.smpp_port,
                allow_unknown_opt_params=True,
            )

            def on_message(pdu):
                db = SessionLocal()
                try:
                    status = _handle_deliver_sm(pdu, db)
                finally:
                    db.close()
                try:
                    if client and client.state == 'BOUND_TRX':
                        client.send_pdu(pdu.make_response(command_status=status))
                except Exception as e:
                    log.error(f"[{provider.name}] –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ PDU: {e}")

            client.set_message_received_handler(on_message)

            log.info(f"[{provider.name}] –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {provider.smpp_host}:{provider.smpp_port}‚Ä¶")
            client.connect()
            client.bind_transceiver(system_id=provider.system_id, password=provider.password, system_type=provider.system_type)
            log.info(f"[{provider.name}] BOUND_TRX OK, —Å–ª—É—à–∞—é‚Ä¶")

            client.listen(auto_send_enquire_link=True)

            log.warning(f"[{provider.name}] –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫.")

        except smpplib.exceptions.PDUError as pdu_exc:
            error_code = pdu_exc.args[1] if len(pdu_exc.args) > 1 else 0
            if error_code == 14:
                log.error(f"[{provider.name}] –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: {pdu_exc}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 30 —Å–µ–∫.")
                if not stop_evt.wait(30):
                    continue
            else:
                log.error(f"[{provider.name}] –û—à–∏–±–∫–∞ PDU: {pdu_exc}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫.")

        except (ConnectionRefusedError, OSError, smpplib.exceptions.ConnectionError) as conn_exc:
            log.error(f"[{provider.name}] –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {conn_exc}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫.")

        except Exception as exc:
            log.error(f"[{provider.name}] –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ SMPP: {exc}. –ü–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 15 —Å–µ–∫.")

        finally:
            try:
                if client and client.state != 'CLOSED':
                    log.info(f"[{provider.name}] –†–∞–∑—Ä—ã–≤ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è (finally).")
                    client.disconnect()
            except Exception:
                pass

            if not stop_evt.is_set():
                time.sleep(15)

    log.info(f"–í–æ—Ä–∫–µ—Ä –¥–ª—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ [{provider.id}] {provider.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")


# —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é –¥–µ—Ä–≥–∞–µ—Ç smpp_server
handle_incoming_sms = _handle_deliver_sm